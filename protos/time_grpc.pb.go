// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: protos/time.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	GetClientId(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	JoinChat(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_JoinChatClient, error)
	LeaveChat(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_LeaveChatClient, error)
	PublishMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_PublishMessageClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) GetClientId(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/protos.ChatService/GetClientId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinChat(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/protos.ChatService/JoinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceJoinChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_JoinChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceJoinChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceJoinChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) LeaveChat(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_LeaveChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], "/protos.ChatService/LeaveChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceLeaveChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_LeaveChatClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type chatServiceLeaveChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceLeaveChatClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) PublishMessage(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (ChatService_PublishMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], "/protos.ChatService/PublishMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServicePublishMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_PublishMessageClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type chatServicePublishMessageClient struct {
	grpc.ClientStream
}

func (x *chatServicePublishMessageClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	GetClientId(context.Context, *ClientRequest) (*ServerResponse, error)
	JoinChat(*ClientRequest, ChatService_JoinChatServer) error
	LeaveChat(*ClientRequest, ChatService_LeaveChatServer) error
	PublishMessage(*ClientRequest, ChatService_PublishMessageServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) GetClientId(context.Context, *ClientRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientId not implemented")
}
func (UnimplementedChatServiceServer) JoinChat(*ClientRequest, ChatService_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChatServiceServer) LeaveChat(*ClientRequest, ChatService_LeaveChatServer) error {
	return status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChatServiceServer) PublishMessage(*ClientRequest, ChatService_PublishMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_GetClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChatService/GetClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetClientId(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).JoinChat(m, &chatServiceJoinChatServer{stream})
}

type ChatService_JoinChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceJoinChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceJoinChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_LeaveChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).LeaveChat(m, &chatServiceLeaveChatServer{stream})
}

type ChatService_LeaveChatServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type chatServiceLeaveChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceLeaveChatServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_PublishMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).PublishMessage(m, &chatServicePublishMessageServer{stream})
}

type ChatService_PublishMessageServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type chatServicePublishMessageServer struct {
	grpc.ServerStream
}

func (x *chatServicePublishMessageServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientId",
			Handler:    _ChatService_GetClientId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChat",
			Handler:       _ChatService_JoinChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LeaveChat",
			Handler:       _ChatService_LeaveChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishMessage",
			Handler:       _ChatService_PublishMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/time.proto",
}
